#!/usr/bin/env node
var fs = require('fs')
var gm = require('gm').subClass({imageMagick: true});

const n = process.argv[2] || 1
cropAndSaveN(n)

//recursively crop and save n images.
function cropAndSaveN(n) {
  if (n <= 1) return console.log('- done -');
  console.log(`- cropping ${n}`);
  const buffer = fs.readFileSync(`./testimg/bg/${n}.jpg`)
  cropImage(buffer, 1200, 1800, function(err, image) {
    if (err) throw(err)
    uploadImage(image, n, 'wiw-background', (err) => {
      cropAndSaveN(n - 1);
    })
  })
}

function cropImage(imageBuffer, w, h, cb) {
  gm(imageBuffer)
    .in('-filter', 'Triangle')
    .in('-define', 'filter:support=2')
    .in('-thumbnail', `${w}x${h}^`)
    .in('-gravity', 'center')
    .in('-extent', `${w}x${h}`)
    .in('-unsharp', '0.25x0.25+8+0.065')
    .in('-dither', 'None')
    .in('-posterize', 136)
    .in('-quality', 82)
    .in('-define', 'jpeg:fancy-upsampling=off')
    .in('-define', 'png:compression-filter=5')
    .in('-define', 'png:compression-level=9')
    .in('-define', 'png:compression-strategy=1')
    .in('-define', 'png:exclude-chunk=all')
    .in('-interlace', 'none')
    .in('-colorspace', 'sRGB')
    .in('-strip')
    .toBuffer(function(err, image){
      if (err) return cb(err)
      cb(null, image)
    })
}

var aws = require('aws-sdk');
aws.config.loadFromPath('./aws_config.json');
var s3 = new aws.S3();

function uploadImage(buf, id, bucket, cb) {
  console.log('- writing', id);
  // fs.writeFile(`testimg/bg/${id}-v1.jpg`, buf, 'base64',(err) => {
  //   if (err) return cb(err)
  //   cb(null)
  // })
  s3.putObject({
    ACL: "public-read",
    Bucket: bucket,
    Key: id + '.jpg',
    Body: buf,
    ContentEncoding: 'base64',
    ContentType: 'image/jpg',
  }, cb)
}
